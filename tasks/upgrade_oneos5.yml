---
# upgrade the router, this may be in multiple steps:
#  - upgrade BOOT
#  - upgrade OS

# TODO: as staging we may need to do a file check of the boot image and in that case a move of the files is not needed anymore

# set facts to make it easier to know if we're ready for upgrade
- name: "UPGRADE ROUTER > set facts to indicate if we're ready for upgrade"
  ansible.builtin.set_fact:
    ready_for_upgrading_boot: "{{ true if upgrade_required_for_boot is true and (upload_required_boot_file is false or (upload_done_for_boot_file is defined and upload_done_for_boot_file is true)) else false }}"
    ready_for_upgrading_os: "{{ true if upgrade_required_for_os is true and (upload_required_os_file is false or (upload_done_for_os_file is defined and upload_done_for_os_file is true)) else false }}"

### UPGRADE BOOT IMAGE
- block:
    - name: UPGRADE ROUTER > upgrade BOOT
      ansible.builtin.debug:
        msg: "yes - we will upgrade the BOOT now"

    # if upgrade needed for BOOT and ready_for_upgrading_boot
    # => do the boot upgrade
    #  set:   upgrade_done_boot
    - name: "UPGRADE ROUTER > upgrade BOOT image"
      ansible.netcommon.cli_command:
        command: "boot flash update /BSA/binaries/{{wanted_boot_file }}"
        prompt: "Continue with installation"
        answer: "y"
      register: output
      vars:
        ansible_command_timeout: "{{ timeout_wait_for_install }}"

    - name: "UPGRADE ROUTER > assert BOOT image is installed correctly"
      ansible.builtin.assert:
        that: "'boot flash update is OK'.lower() is in output.stdout.lower()"
        success_msg: "BOOT image has been installed correctly, rebooting now"
        fail_msg: "BOOT image could not be installed correctly - ABORT"

    - name: "UPGRADE ROUTER > reboot to enable BOOT image"
      import_tasks:
        file: "reboot.yml"

    - name: "UPGRADE ROUTER > verify BOOT version after upgrade"
      import_tasks:
        file: "post_upgrade_checks.yml"

    - name: "UPGRADE ROUTER > assert BOOT version is correct after reboot"
      ansible.builtin.assert:
        that: "post_check_system[0].BOOT_VERSION == wanted_boot_version"
        success_msg: "BOOT image has been verified after reboot, all OK"
        fail_msg: "BOOT image was not upgraded correctly, abort upgrade process"

    - name: "UPGRADE ROUTER > set upgrade_done_boot"
      ansible.builtin.set_fact:
        upgrade_done_boot: "{{ true }}"

  when:
    - ready_for_upgrading_boot is true



### UPGRADE OS IMAGE
- block:
    - name: UPGRADE ROUTER > upgrade ONEOS 5
      ansible.builtin.debug:
        msg: "yes - we will upgrade the OS now"

    - block:

      - name: UPGRADE ROUTER > remove backup file if it exists
        ansible.netcommon.cli_command:
          command: "rm /BSA/binaries/{{ pre_check_system[0].SOFTWARE }}.backup"
        when: pre_check_system is defined and (fact_ls_bsa_binaries | selectattr('FILE', 'eq', '{}.backup'.format(pre_check_system[0].SOFTWARE)) | length > 0)

      - name: UPGRADE ROUTER > replace active OS file with the new filename
        ansible.netcommon.cli_command:
          command: "{{ item }}"
        loop:
          - "mv /BSA/binaries/{{ fact_bsaboot[0].BOOTFILE }} /BSA/binaries/{{ pre_check_system[0].SOFTWARE }}.backup"
          - "mv /BSA/binaries/{{ wanted_os_file }} /BSA/binaries/{{ fact_bsaboot[0].BOOTFILE }}"
        when: fact_bsaboot is defined and pre_check_system is defined and wanted_os_file != ""
        vars:
          ansible_command_timeout: "{{ timeout_wait_for_command }}"

      - name: "UPGRADE ROUTER > set upgrade_done_os"
        ansible.builtin.set_fact:
          is_staged: "{{ true }}"

      when: fact_bsaboot is defined and pre_check_system is defined and wanted_os_file != ""


    - block:

      - name: "UPGRADE ROUTER > reboot to enable OS image"
        import_tasks:
          file: "reboot.yml"

      - name: "UPGRADE ROUTER > pause 30 seconds, wait for tacacs"
        ansible.builtin.pause:
          seconds: 30

      - name: "UPGRADE ROUTER > verify OS version after upgrade"
        import_tasks:
          file: "post_upgrade_checks.yml"

      - name: "UPGRADE ROUTER > assert OS version is correct after reboot"
        ansible.builtin.assert:
          that: "post_check_system[0].SOFTWARE == wanted_os_version"
          success_msg: "OS image has been verified after reboot, all OK"
          fail_msg: "OS image was not upgraded correctly, abort upgrade process"

      - name: "UPGRADE ROUTER > set upgrade_done_os"
        ansible.builtin.set_fact:
          upgrade_done_os: "{{ true }}"

      - name: "UPGRADE ROUTER > set upgrade_done_os"
        ansible.builtin.set_fact:
          is_staged: "{{ false }}"

      when: is_staged|bool is true

  when:
    - ready_for_upgrading_os is true
    - ready_for_upgrading_boot is false or upgrade_done_boot is true


- name: "UPGRADE ROUTER > set upgraded_finished"
  ansible.builtin.set_fact:
    upgraded_finished: "{{ true if (upgrade_required_for_boot is false or (upgrade_required_for_boot is true and upgrade_done_boot is true)) and (upgrade_required_for_os is false or (upgrade_required_for_os is true and upgrade_done_os is true)) else false }}"
